plugins {
  id "idea"
  id "com.github.mxenabled.binks" version "0.0.1"
  id "com.github.mxenabled.vogue" version "1.0.1"
  id "com.github.mxenabled.coppuccino" version "3.0.4" apply false
  id "com.github.mxenabled.hush" version "2.2.0" apply false
  id "com.jfrog.artifactory" version "4.28.2" apply false
  id "io.freefair.lombok" version "6.4.3" apply false
}

version "17.1.1"

allprojects {
    group "com.mx.path.sdk"
    description "The Path SDK"
    version rootProject.version
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://jitpack.io" }
    }
}

subprojects {
    ext {
        // -----------------------------------------------------------------
        // These re-add JAXB classes needed for SOAP interaction.
        // Version changes to any of these need to be tested (not just built)
        //   with an apps that use SOAP.
        // -----------------------------------------------------------------
        xmlbindapi = "jakarta.xml.bind:jakarta.xml.bind-api:2.3.3"
        xmlsoapapi = "jakarta.xml.soap:jakarta.xml.soap-api:1.4.2"
        jaxbimpl = "com.sun.xml.bind:jaxb-impl:2.3.1"
        jaxbruntime = "org.glassfish.jaxb:jaxb-runtime:2.3.3"
        // -----------------------------------------------------------------
    }
}

configure(project.subprojects) {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "groovy"
    apply plugin: "com.mx.hush"
    apply plugin: "com.mx.coppuccino"
    apply plugin: "com.mx.vogue"
    apply plugin: "com.jfrog.artifactory"
    apply plugin: "io.freefair.lombok"

    dependencies {
        testImplementation "org.mockito:mockito-inline:4.+"
        testImplementation "org.spockframework:spock-core:2.+"
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.+"
    }

    test { useJUnitPlatform() }

    compileJava { options.compilerArgs << "-parameters" }

    sourceSets {
        test {
            groovy { srcDirs "src/test/groovy" }
            java { srcDirs "src/test/java" }
        }
    }

    coppuccino {
        rootDir = "${projectDir}/"
    }

    vogue {
        dependencyUpdatesOutputDir = "${projectDir}/build/dependencyUpdates"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
        archives jar
    }

    artifactory {
        contextUrl = "https://artifactory.internal.mx:443"
        publish {
            repository {
                repoKey = "gradle-local"
                username = "gradle-write"
                password = System.getenv("GRADLE_ARTIFACTORY_API_KEY")
                maven = true
            }
            defaults { publications("mavenJava") }
            publishBuildInfo = true
            publishArtifacts = true
            publishPom = true
        }
        resolve {
            repository {
                repoKey = "maven-local"
                username = "maven-read"
                maven = true
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) { from components.java }
        }
    }

    artifactoryPublish { dependsOn jar }
}

task spotlessApply {
    subprojects.each {
        it.afterEvaluate {
            def spotlessApplyTask = it.tasks.findByName("spotlessApply")
            dependsOn(spotlessApplyTask)
        }
    }
}

task dependencyCheckAnalyze {
    subprojects.each {
        it.afterEvaluate {
            def dependencyCheckAnalyzeTask = it.tasks.findByName("dependencyCheckAnalyze")
            dependsOn(dependencyCheckAnalyzeTask)
        }
    }
}

task subdependencies {
    subprojects.each {
        it.afterEvaluate {
            def dependenciesTask = it.tasks.findByName("dependencies")
            dependsOn(dependenciesTask)
        }
    }
}

project.tasks.getByPath("dependencies").finalizedBy("subdependencies")

task install {
    configure {
        description "Publishes all subprojects to local maven repo"
        setProperty("group", "Publishing")
    }
    subprojects.each {
        it.afterEvaluate {
            def publishToMavenLocalTask = it.tasks.findByName("publishToMavenLocal")
            dependsOn(publishToMavenLocalTask)
        }
    }
}
