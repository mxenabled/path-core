plugins {
  id "idea"
  id "com.github.mxenabled.vogue" version "1.0.2"
  id "com.github.mxenabled.coppuccino" version "3.2.1" apply false
  id "com.github.mxenabled.hush" version "2.3.4" apply false
  id "io.freefair.lombok" version "6.5.1" apply false
  id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

version "1.6.0" // x-release-please-version

def platformProject = "platform"
def publishedProjects = [
  platformProject,
  "common",
  "context",
  "gateway",
  "gateway-generator",
  "http",
  "messaging",
  "testing",
  "utilities"
]

allprojects {
  if (it.name != platformProject) {
    apply plugin: "java"
  }

  group "com.mx.path-core"
  description "MX Path Core"
  version rootProject.version
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    mavenCentral()
    mavenLocal()
  }
}

subprojects {
  if (it.name != platformProject) {
    apply plugin: "java-library"
    apply plugin: "groovy"
    apply plugin: "com.github.mxenabled.hush"
    apply plugin: "com.github.mxenabled.coppuccino"
    apply plugin: "com.github.mxenabled.vogue"
    apply plugin: "io.freefair.lombok"

    dependencies {
      constraints {
        api("com.google.code.gson:gson") {
          version {
            require "[2.9,2.10["
          }
        }
        api("io.opentracing:opentracing-api") {
          version {
            require "[0.33,0.34["
          }
        }
        api("com.google.guava:guava") {
          version {
            require "[31.0,32.0["
          }
        }
        api "commons-lang:commons-lang:2.6"
        api "org.slf4j:slf4j-api:1.7.30"
        api "org.apache.httpcomponents:httpclient:4.5.13"

        // -----------------------------------------------------------------
        // These re-add JAXB classes needed for SOAP interaction.
        // Version changes to any of these need to be tested (not just built)
        //   with an apps that use SOAP.
        // -----------------------------------------------------------------
        api "jakarta.xml.bind:jakarta.xml.bind-api:2.3.3!!"
        api "jakarta.xml.soap:jakarta.xml.soap-api:1.4.2!!"
        api "com.sun.xml.bind:jaxb-impl:2.3.1!!"
        api "org.glassfish.jaxb:jaxb-runtime:2.3.7!!"
        // -----------------------------------------------------------------
      }

      testImplementation "org.mockito:mockito-inline:[4.0,5.0["
      testImplementation "org.spockframework:spock-core:[2.0,3.0["
      testImplementation "org.junit.jupiter:junit-jupiter-api:[5.0,6.0["
    }

    test { useJUnitPlatform() }

    compileJava { options.compilerArgs << "-parameters" }

    sourceSets {
      test {
        groovy { srcDirs "src/test/groovy" }
        java { srcDirs "src/test/java" }
      }
    }

    javadoc {
      classpath = configurations.compileClasspath
      options {
        setMemberLevel JavadocMemberLevel.PUBLIC
        setAuthor true
      }
    }

    coppuccino {
      rootDir = "${projectDir}/"
    }

    vogue {
      dependencyUpdatesOutputDir = "${projectDir}/build/dependencyUpdates"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
      classifier = "sources"
      from sourceSets.main.allSource
    }

    task packageJavadoc(type: Jar) {
      classifier = "javadoc"
      from javadoc
    }

    artifacts {
      archives jar
      archives packageJavadoc
      archives sourcesJar
    }

    if (publishedProjects.contains(it.name)) {
      apply plugin: "maven-publish"
      apply plugin: "signing"

      publishing {
        publications {
          maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact packageJavadoc

            pom {
              groupId = project.group
              artifactId = project.name
              name = project.name
              description = project.description
              url = "https://github.com/mxenabled/path-core"

              developers {
                developer {
                  name = "MX"
                  email = "path@mx.com"
                  organization = "MX Technologies Inc."
                  url = "http://www.mx.com"
                }
              }

              licenses {
                  license {
                      name = "Proprietary"
                      url = "https://github.com/mxenabled/path-core/blob/master/LICENSE"
                      distribution = "repo"
                  }
              }

              scm {
                connection = "scm:git:git@github.com:mxenabled/path-core.git"
                url = "https://github.com/mxenabled/path-core/tree/master"
              }
            }
          }
        }
      }

      signing {
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingKeyPassword")
        if (signingKey != null && signingKey != "") {
          useInMemoryPgpKeys(signingKey, signingPassword)
          sign publishing.publications.maven
          logger.lifecycle("Configuring signing for ${project.name}")
        } else {
          logger.lifecycle("Skipping artifact signing for ${project.name} - missing signing key")
        }
      }
    }
  }
}

nexusPublishing {
  def ossrhUserName = findProperty("ossrhUserName")
  def ossrhToken = findProperty("ossrhToken")

  repositories {
    central {
      nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
      snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
      username = ossrhUserName
      password = ossrhToken
    }
  }
}


task spotlessApply {
  subprojects.each {
    if (it.name != platformProject) {
      it.afterEvaluate {
        def spotlessApplyTask = it.tasks.findByName("spotlessApply")
        dependsOn(spotlessApplyTask)
      }
    }
  }
}

task dependencyCheckAnalyze {
  subprojects.each {
    if (it.name != platformProject) {
      it.afterEvaluate {
        def dependencyCheckAnalyzeTask = it.tasks.findByName("dependencyCheckAnalyze")
        dependsOn(dependencyCheckAnalyzeTask)
      }
    }
  }
}

task subdependencies {
  subprojects.each {
    it.afterEvaluate {
      def dependenciesTask = it.tasks.findByName("dependencies")
      dependsOn(dependenciesTask)
    }
  }
}

project.tasks.getByPath("dependencies").finalizedBy("subdependencies")
